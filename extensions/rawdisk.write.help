# Copyright (C) 2014, 2015 Codethink Limited
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, see <http://www.gnu.org/licenses/>.

help: |

    Write a system produced by Morph to a physical disk, or to a file that can
    be used as a virtual disk. The target will be formatted as a single Btrfs
    partition, with the system image written to a subvolume in /systems, and
    other subvolumes created for /home, /opt, /root, /srv and /var.

    When written to a physical drive, the drive can be used as the boot device
    for a 'real' machine.

    When written to a file, the file can be used independently of `morph` to
    create virtual machines with KVM / libvirt, OpenStack or, after converting
    it to VDI format, VirtualBox.

    `morph deploy` will fail if the file specified by `location` already
    exists.

    If used in `morph upgrade`, the rootfs produced by 'morph build' is added
    to the existing raw disk image or device as an additional btrfs sub-volume.
    `morph upgrade` will fail if the file specified by `location` does not
    exist, or is not a Baserock raw disk image. (Most users are unlikely to
    need or use this functionality: it is useful mainly for developers working
    on the Baserock tools.)

    Parameters:

    * location: the pathname of the disk image to be created/upgraded, or the
      path to the physical device.

    * VERSION_LABEL=label - should contain only alpha-numeric
      characters and the '-' (hyphen) character. Mandatory if being used with
      `morph update`

    * INITRAMFS_PATH=path: the location of an initramfs for the bootloader to
      tell Linux to use, rather than booting the rootfs directly.

    * DTB_PATH=path: **(MANDATORY)** for systems that require a device tree
      binary - Give the full path (without a leading /) to the location of the
      DTB in the built system image . The deployment will fail if `path` does
      not exist.

    * BOOTLOADER_INSTALL=value: the bootloader to be installed
      **(MANDATORY)** for non-x86 systems

        allowed values =
        - 'extlinux' (default) - the extlinux bootloader will
           be installed
        - 'none' - no bootloader will be installed by `morph deploy`. A
           bootloader must be installed manually. This value must be used when
           deploying non-x86 systems such as ARM.

    * BOOTLOADER_CONFIG_FORMAT=value: the bootloader format to be used.
      If not specified for x86-32 and x86-64 systems, 'extlinux' will be used

        allowed values =
        - 'extlinux'

    * KERNEL_ARGS=args: optional additional kernel command-line parameters to
      be appended to the default set. The default set is:

        'rw init=/sbin/init rootfstype=btrfs \
          rootflags=subvol=systems/default/run \
          root=[name or UUID of root filesystem]'

        (See https://www.kernel.org/doc/Documentation/kernel-parameters.txt)

    * PARTITION_FILE=path: Setting this parameter enables partitioning
      functions. The path points to a YAML partition specification following
      the format shown in the example below:

            start_offset: 2048
            partition_table_format: gpt
            partitions:
            - description: boot
              size: 1M
              fdisk_type: 0b
              format: vfat
              boot: yes
              mountpoint: /boot
            - description: rootfs
              number: 3
              size: fill
              format: btrfs
              fdisk_type: 83
              mountpoint: /
            raw_files:
            - file: boot/uboot-env.img
              offset_bytes: 512

      There are a couple of global attributes:

      - 'start_offset' is mandatory, specifying the start sector of the first
        partition on the device.
      - 'partition_table_format' is mandatory, specifying the partition table
        format to be used when creating the partition table. Possible format
        strings are 'gpt', 'dos', or 'mbr'.

      Following this, up to 4 (for MBR) or 128 (for GPT) partitions can be
      specified, in the list 'partitions':

      - For all partitions, 'size', 'fdisk_type' and 'format' are mandatory.
        * 'size' is the size in bytes, or 'fill', which will expand the
          partition to fill any unused space. Only one partition can have
          the fill property.
        * 'fdisk_type' is the partition type, specified as a two-digit
          hexadecimal value, without a '0x' prefix.
        * 'format' can be a filesystem with associated mkfs.* tool,
          or 'none' for an unformatted partition.
      - 'number' is optional, and can be used to override the numbering of
        partitions, for MBR partition tables only. The physical order of
        partitions on the device is always determined by the order in which
        they are defined in the specification even if the numbering differs.
      - 'boot' sets the partition's bootable flag.
      - 'mountpoint' specifies the mountpoint of a partition. One partition
        must have a '/' mountpoint to contain the rootfs, otherwise this is
        optional.
      - Files present in the pointpoint for a given partition will be copied
        to the created partition.

      - Where a list of 'raw_files' is given, these files are written directly
        to the device using `dd`.
        * Files are written consecutively in the order they are listed
        * Files can be given a specific offset with 'offset' or 'offset_bytes'
        * The 'raw_files' can exist at the top level of the partition file, or
          within a partition list item. When specified inside a partition,
          'offset' or 'offset_bytes' is counted from the start of that
          partition, otherwise from the start of the device.

      Notes:
      - Sectors given in the specification are assumed to be 512 bytes in
        size. If the logical block size of underlying storage differs from
        this (e.g. 4096), adjustments are made automatically where needed.

    (See `morph help deploy` for details of how to pass parameters to write
    extensions)
