#!/usr/bin/python
# Copyright (C) 2012-2015  Codethink Limited
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.


'''A Morph deployment write extension for raw disk images.'''


import contextlib
import os
import pyfdisk
import re
import subprocess
import sys
import time
import tempfile

import writeexts


class RawDiskWriteExtension(writeexts.WriteExtension):

    '''See rawdisk.write.help for documentation'''

    def process_args(self, args):
        if len(args) != 2:
            raise writeexts.ExtensionError(
                'Wrong number of command line args')

        temp_root, location = args
        upgrade = self.get_environment_boolean('UPGRADE')

        part_spec = os.environ.get('PARTITION_FILE', 'partitioning/default')

        if upgrade:
            self.upgrade_local_system(location, temp_root)
        else:
            try:
                if not self.is_device(location):
                    with self.created_disk_image(location):
                        self.do_partitioning(location, temp_root, part_spec)
                    self.status(msg='Disk image has been created at %s' %
                                     location)
                else:
                    self.do_partitioning(location, temp_root, part_spec)
                    self.status(msg='System deployed to %s' % location)
            except Exception:
                self.status(msg='Failure to deploy system to %s' %
                                 location)
                raise

    def upgrade_local_system(self, raw_disk, temp_root):
        self.complete_fstab_for_btrfs_layout(temp_root)

        with self.mount(raw_disk) as mp:
            version_label = self.get_version_label(mp)
            self.status(msg='Updating image to a new version with label %s' %
                        version_label)

            version_root = os.path.join(mp, 'systems', version_label)
            os.mkdir(version_root)

            old_orig = os.path.join(mp, 'systems', 'default', 'orig')
            new_orig = os.path.join(version_root, 'orig')
            subprocess.check_call(
                ['btrfs', 'subvolume', 'snapshot', old_orig, new_orig])

            subprocess.check_call(
                ['rsync', '-a', '--checksum', '--numeric-ids', '--delete',
                 temp_root + os.path.sep, new_orig])

            self.create_run(version_root)

            default_path = os.path.join(mp, 'systems', 'default')
            if os.path.exists(default_path):
                os.remove(default_path)
            else:
                # we are upgrading and old system that does
                # not have an updated extlinux config file
                if self.bootloader_config_is_wanted():
                    self.generate_bootloader_config(mp)
                self.install_bootloader(mp)
            os.symlink(version_label, default_path)

            if self.bootloader_config_is_wanted():
                self.install_kernel(version_root, temp_root)

    def get_version_label(self, mp):
        version_label = os.environ.get('VERSION_LABEL')

        if version_label is None:
            raise writeexts.ExtensionError('VERSION_LABEL was not given')

        if os.path.exists(os.path.join(mp, 'systems', version_label)):
            raise writeexts.ExtensionError('VERSION_LABEL %s already exists'
                                           % version_label)

        return version_label

    def do_partitioning(self, location, temp_root, part_spec):
        '''Perform partitioning

        Perform partitioning using the pyfdisk.py module. Documentation
        for this, and guidance on how to create a partition specification can
        be found in extensions/pyfdisk.README

        Args:
            location: Path to the target device or image
            temp_root: Location of the unpacked Baserock rootfs
            part_spec: Path to a YAML formatted partition specification
        '''
        disk_size = self.get_disk_size()
        if not disk_size:
            raise ExtensionError('DISK_SIZE is not defined')

        # Create partition table
        dev = pyfdisk.load_yaml(part_spec, location, disk_size)
        self.status(msg='Loaded partition specification from %s' % part_spec)
        self.status(msg=str(dev.partitionlist))

        dev.commit()
        dev.create_filesystems(skip=['/'])

        mountpoints = set(part.mountpoint for part in dev.partitionlist)
        if '/' not in mountpoints:
            raise ExtensionError('No partition with root mountpoint, please '
                                 'specify a partition with \'mountpoint: /\' '
                                 'in the partition specification')

        mounted_partitions = set(part for part in dev.partitionlist
                                 if hasattr(part, 'mountpoint'))

        # Create root filesystem, and copy files to partitions
        for part in mounted_partitions:
            if not hasattr(part, 'filesystem'):
                raise ExtensionError('Cannot mount a partition without '
                                     'filesystem, please specify one for '
                                     '\'%s\' partition in the partition '
                                     'specification' % part.mountpoint)
            if part.mountpoint == '/':
                # Re-format the rootfs, to include needed extra features
                with pyfdisk.create_loopback(location,
                                             part.extent.start *
                                             dev.sector_size, part.size) as l:
                    self.mkfs_btrfs(l)
            with self.mount_partition(part, dev) as part_mount_dir:
                if part.mountpoint == '/':
                    root_uuid = self.get_uuid(location, part.extent.start *
                                              dev.sector_size)
                    self.create_btrfs_system_layout(temp_root,
                                                    part_mount_dir,
                                                    'factory', root_uuid, dev)
                else:
                    # Copy files to partition from unpacked rootfs
                    src_dir = os.path.join(temp_root,
                                           re.sub('^/', '', part.mountpoint))
                    self.move_or_copy_dir(src_dir, part_mount_dir, copy=True)


    @contextlib.contextmanager
    def mount_partition(self, partition, device):
        self.status(msg='Mounting partition %d' % partition.number)
        with pyfdisk.create_loopback(device.location,
                                     offset=(partition.extent.start
                                     * device.sector_size)) as loop_device:
            with self.mount(loop_device) as mountpoint:
                yield mountpoint

RawDiskWriteExtension().run()
